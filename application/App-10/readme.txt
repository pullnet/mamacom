ローカルhtml+サーバーAPI連携のアプリ制作手順

１.ディレクトリ構造

・App-10 ........... アプリのデータ(Visual Studio for Xamarinで作られてます)
・Assets_html ...... Webviewで見せるローカルhtmlが入ってます
			大きく分けてコーディング用の「cording」と
			アプリ内のリソース用htmlとして登録するための「html」の２種類に分かれてる。

			流れとして「cording」で画面をコーディングしてAPIへのリクエストテストしながらガワを作っていき、
			コンパイル用パッチ「compile.php」を実行させて「html」内にhtmlファイルに変換する。
			後は「html」内のファイル全てをアプリのリソース管理用Assetsディレクトリ内に放り込むだけ
・server ........... サーバー側、いわゆるAPIが入る。テストの場合はここにリクエストしてあれこれする
・server_sql........ APIのデータベース。


２.大まか過ぎる流れ


	①　Assets_html -> cordingにて見せるページ(html)をphpで作成

	②　serverに処理用のAPIを準備する

	③　Assets_html -> cordingからserverにあるAPIにリクエスト・レスポンスさせて機能を作る

	④　ある程度機能が出来上がったところでcordingからhtmlへコンパイラ実行(php→htmlコード変換等...)

	⑤　Visual Studioを開いてApp-10.sinのプロジェクトファイルを開く

	⑦　アプリ側の設定(Webviewの閲覧アドレスとか)をして、
		リソース管理のAssetsディレクトリーへ④でコンパイルしたhtmlディレクトリ内の
		ファイルを全てコピー。(ドラッグドロップでOK)

	⑧　あとはエミュレータから実行または実機で確認。


３.なぜこうしてるか？

	超簡単な方法はWebViewで直接アプリ専用のドメインを置いてそこにアクセスしてもいいのだが
	トラフィック量が多くなるのと、やはりWebは遅いのが問題。

	(Cakeで60～90ms、ネイティブPHPで20～90ms)

	かといってネイティブで作るとしても
	POST送信とかがやたら面倒になるし、やりづらいし、端末のOSごとに
	覚える内容が全然違う
	
	そこでWebViewでガワだけをローカルhtml(アプリのリソースに準備)表示させて
	ロジックそのものをAPIして必要なものだけをやり取りする作戦に。

	これならばレスポンスが早くなるしトラフィックの節約にもなる。

	(APIにリクエストまたはAPIからレスポンスが帰ってくるときだけなので....)